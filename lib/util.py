"""Manage the Adaway database."""

import operator
import os
import sqlite3
from socket import gethostname

from lib.config import Config
from lib.download import download_file
from lib.termcolor import Termcolor

config = Config()
termcolor = Termcolor()


def database_exists():
    """Returns True if the file exists, otherwise returns False"""
    return os.path.exists(config.database)


def create_default_database():
    """Create a new database"""
    termcolor.info('Creating dabatase')

    with sqlite3.connect(config.database) as connection:
        cursor = connection.cursor()

        sql = (
            'CREATE TABLE blacklist ('
            '    id INTEGER NOT NULL PRIMARY KEY,'
            '    hostname TEXT NOT NULL UNIQUE'
            ');'
        )

        cursor.execute(sql)


def populate_database():
    """Populate the database using hosts files as source."""
    host_files = config.read_key('host_files')

    for host_file in host_files:
        hosts = download_file(host_file)

        with sqlite3.connect(config.database) as connection:
            cursor = connection.cursor()

            for host in hosts:
                try:
                    cursor.execute('INSERT INTO blacklist VALUES(NULL, ?)', (host,))
                except sqlite3.IntegrityError:
                    pass


def export_hosts_headers(filename):
    """
    Keyword arguments:
    filename -- The file where the database will be exported
    """
    filename = filename or config.filename

    with open(filename, 'w') as hosts_file:
        termcolor.info('Creating hosts file')

        hosts_file.write('# This hosts file was generated by AdAway.py (https://github.com/edieguez/adaway-py)\n')
        hosts_file.write('# Do not modify it directly, it will be overwritten when AdAway.py is applied again.\n')
        hosts_file.write(f'127.0.0.1 {gethostname()}\n')
        hosts_file.write('127.0.0.1 %s\n' % 'localhost')
        hosts_file.write('::1       %s\n' % 'localhost')

        custom_hosts = config.read_key('custom_hosts')

        if custom_hosts:
            hosts_file.write('\n# Custom hosts\n')
            custom_hosts = sorted(custom_hosts.items(), key=operator.itemgetter(1))

            for host, ip in custom_hosts:
                hosts_file.write(f'{ip}\t{host}\n')

        hosts_file.write('\n')


def export_hosts_file(filename=None):
    """Export the database to a text file.

    Keyword arguments:
    filename -- The file where the database will be exported
    """
    export_hosts_headers(filename)
    filename = filename or config.filename

    with open(filename, 'a') as hosts_file:
        blacklist = config.read_key('blacklist')
        whitelist = config.read_key('whitelist')
        whitelist.append('localhost')

        if blacklist:
            hosts_file.write('# Blacklisted hosts\n')

            for host in blacklist:
                hosts_file.write('%s\t%s\n' % ('0.0.0.0', host))

        with sqlite3.connect(config.database) as connection:
            cursor = connection.cursor()

            hosts_file.write('\n# Blocked domains\n')

            hosts = cursor.execute('SELECT hostname FROM blacklist')
            hosts = set([host[0] for host in hosts])
            hosts = sorted(hosts.difference(whitelist))

            for host in hosts:
                try:
                    hosts_file.write(f'0.0.0.0\t{host}\n')
                except UnicodeEncodeError as ex:
                    termcolor.error(str(ex))

            hosts_file.write('\n')
